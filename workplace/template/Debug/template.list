
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08000e38  08000e38  00010e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08001094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000018  080010ac  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000038  080010ac  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003bd6  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000009af  00000000  00000000  00023c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000170  00000000  00000000  000245c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00024738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f29  00000000  00000000  00024850  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000ea6  00000000  00000000  00025779  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002661f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000043c  00000000  00000000  0002669c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000018 	.word	0x20000018
 8000158:	00000000 	.word	0x00000000
 800015c:	08000e20 	.word	0x08000e20

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000001c 	.word	0x2000001c
 8000178:	08000e20 	.word	0x08000e20

0800017c <delay_Ms>:
#include "include.h"


void delay_Ms(int delay)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	int i=0;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	for(; delay>0;delay--)
 8000188:	e00d      	b.n	80001a6 <delay_Ms+0x2a>
		for(i=0;i<2460;i++); //measured with oscilloscope
 800018a:	2300      	movs	r3, #0
 800018c:	60fb      	str	r3, [r7, #12]
 800018e:	e002      	b.n	8000196 <delay_Ms+0x1a>
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	f640 129b 	movw	r2, #2459	; 0x99b
 800019c:	4293      	cmp	r3, r2
 800019e:	ddf7      	ble.n	8000190 <delay_Ms+0x14>
	for(; delay>0;delay--)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3b01      	subs	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	dcee      	bgt.n	800018a <delay_Ms+0xe>
}
 80001ac:	bf00      	nop
 80001ae:	3714      	adds	r7, #20
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr

080001b6 <delay_Us>:

void delay_Us(int delay)
{
 80001b6:	b480      	push	{r7}
 80001b8:	b085      	sub	sp, #20
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<(delay*2);i++)	//accurate range 10us-100us
 80001be:	2300      	movs	r3, #0
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	e003      	b.n	80001cc <delay_Us+0x16>
	{
		asm("mov r0, r0");
 80001c4:	4600      	mov	r0, r0
	for(int i = 0;i<(delay*2);i++)	//accurate range 10us-100us
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	3301      	adds	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	005a      	lsls	r2, r3, #1
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dcf6      	bgt.n	80001c4 <delay_Us+0xe>
	}
}
 80001d6:	bf00      	nop
 80001d8:	3714      	adds	r7, #20
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <read_dht22_humidity_and_temperature>:
#include "include.h"

void read_dht22_humidity_and_temperature(uint16_t* temp,uint16_t* hum,uint16_t*  c_sum, signed char* minus)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
 80001ec:	603b      	str	r3, [r7, #0]
	uint16_t humidity=0x0000, temperature=0x0000; //(16 bits)
 80001ee:	2300      	movs	r3, #0
 80001f0:	83fb      	strh	r3, [r7, #30]
 80001f2:	2300      	movs	r3, #0
 80001f4:	83bb      	strh	r3, [r7, #28]
	uint8_t checksum=0x00; //8bits checksum
 80001f6:	2300      	movs	r3, #0
 80001f8:	76fb      	strb	r3, [r7, #27]
	unsigned char i=0;//i: counter the number of a frame (40 bit).
 80001fa:	2300      	movs	r3, #0
 80001fc:	76bb      	strb	r3, [r7, #26]
	*minus=1; //initial alway positive
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]

	/*Start Signal*/
	RCC->AHBENR|=1; //GPIOA ABH bus clock On.
 8000204:	4a6b      	ldr	r2, [pc, #428]	; (80003b4 <read_dht22_humidity_and_temperature+0x1d4>)
 8000206:	4b6b      	ldr	r3, [pc, #428]	; (80003b4 <read_dht22_humidity_and_temperature+0x1d4>)
 8000208:	69db      	ldr	r3, [r3, #28]
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	61d3      	str	r3, [r2, #28]
	GPIOA->MODER|=0x1000; //GPIOA pin 6 to OUTPUT. p184
 8000210:	4a69      	ldr	r2, [pc, #420]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000212:	4b69      	ldr	r3, [pc, #420]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR|=0x40; //0100 0000 set Pin 6 HIGH. p186
 800021c:	4a66      	ldr	r2, [pc, #408]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 800021e:	4b66      	ldr	r3, [pc, #408]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000226:	6153      	str	r3, [r2, #20]
	delay_Ms(1);
 8000228:	2001      	movs	r0, #1
 800022a:	f7ff ffa7 	bl	800017c <delay_Ms>
	GPIOA->ODR&=~0x40; //0011 1111 low-state at least 500 us -> Pin 6 LOW
 800022e:	4a62      	ldr	r2, [pc, #392]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000230:	4b61      	ldr	r3, [pc, #388]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000238:	6153      	str	r3, [r2, #20]
	delay_Ms(1);
 800023a:	2001      	movs	r0, #1
 800023c:	f7ff ff9e 	bl	800017c <delay_Ms>
	GPIOA->ODR|=0x40; //pin 6 high state and sensor gives this 20us-40us -> Pin 6 HIGH
 8000240:	4a5d      	ldr	r2, [pc, #372]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000242:	4b5d      	ldr	r3, [pc, #372]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800024a:	6153      	str	r3, [r2, #20]
	delay_Us(40);
 800024c:	2028      	movs	r0, #40	; 0x28
 800024e:	f7ff ffb2 	bl	80001b6 <delay_Us>
	GPIOA->MODER&=~0x3000; // ~0011 0000 0000 0000 GPIOA pin 6 to INPUT. p184
 8000252:	4a59      	ldr	r2, [pc, #356]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000254:	4b58      	ldr	r3, [pc, #352]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800025c:	6013      	str	r3, [r2, #0]


	//wait for response from sensor
	while((GPIOA->IDR & 0x40)){}//Wait forever until Input Data Register Pin 6 LOW
 800025e:	bf00      	nop
 8000260:	4b55      	ldr	r3, [pc, #340]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000262:	691b      	ldr	r3, [r3, #16]
 8000264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f9      	bne.n	8000260 <read_dht22_humidity_and_temperature+0x80>
	while(!(GPIOA->IDR & 0x40)){}//Wait forever until Input Data Register Pin 6 HIGH
 800026c:	bf00      	nop
 800026e:	4b52      	ldr	r3, [pc, #328]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000270:	691b      	ldr	r3, [r3, #16]
 8000272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <read_dht22_humidity_and_temperature+0x8e>
	while((GPIOA->IDR & 0x40)){}//Wait forever until Input Data Register Pin 6 LOW
 800027a:	bf00      	nop
 800027c:	4b4e      	ldr	r3, [pc, #312]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 800027e:	691b      	ldr	r3, [r3, #16]
 8000280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f9      	bne.n	800027c <read_dht22_humidity_and_temperature+0x9c>

	//read values from sensor
	while(i<40)
 8000288:	e05b      	b.n	8000342 <read_dht22_humidity_and_temperature+0x162>
	{
		while(!(GPIOA->IDR&0x40)){}//Wait forever until Input Data Register Pin 6 HIGH
 800028a:	bf00      	nop
 800028c:	4b4a      	ldr	r3, [pc, #296]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 800028e:	691b      	ldr	r3, [r3, #16]
 8000290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <read_dht22_humidity_and_temperature+0xac>
		delay_Us(50);
 8000298:	2032      	movs	r0, #50	; 0x32
 800029a:	f7ff ff8c 	bl	80001b6 <delay_Us>
		/*check if PIN6 still HIGH over 45us, the vol-lengh mean data "1"
		 * because vol-lengh 26-28us mean "0" and 70us mean "1"
		 * then it have 80us LOW before next data because "0"or"1" depend on TIME of HIGH.
		*/
		if((GPIOA->IDR & 0x40)&&i<16)
 800029e:	4b46      	ldr	r3, [pc, #280]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 80002a0:	691b      	ldr	r3, [r3, #16]
 80002a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00e      	beq.n	80002c8 <read_dht22_humidity_and_temperature+0xe8>
 80002aa:	7ebb      	ldrb	r3, [r7, #26]
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d80b      	bhi.n	80002c8 <read_dht22_humidity_and_temperature+0xe8>
		{
			humidity|=(0x8000>>i); //if "1" put it from left to right
 80002b0:	7ebb      	ldrb	r3, [r7, #26]
 80002b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002b6:	fa42 f303 	asr.w	r3, r2, r3
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	83fb      	strh	r3, [r7, #30]
 80002c6:	e032      	b.n	800032e <read_dht22_humidity_and_temperature+0x14e>

		}
		else if((GPIOA->IDR & 0x40) && i>=16 && i<32)
 80002c8:	4b3b      	ldr	r3, [pc, #236]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d018      	beq.n	8000306 <read_dht22_humidity_and_temperature+0x126>
 80002d4:	7ebb      	ldrb	r3, [r7, #26]
 80002d6:	2b0f      	cmp	r3, #15
 80002d8:	d915      	bls.n	8000306 <read_dht22_humidity_and_temperature+0x126>
 80002da:	7ebb      	ldrb	r3, [r7, #26]
 80002dc:	2b1f      	cmp	r3, #31
 80002de:	d812      	bhi.n	8000306 <read_dht22_humidity_and_temperature+0x126>
		{
			//Check minus temperature
			if(i==16){
 80002e0:	7ebb      	ldrb	r3, [r7, #26]
 80002e2:	2b10      	cmp	r3, #16
 80002e4:	d102      	bne.n	80002ec <read_dht22_humidity_and_temperature+0x10c>
				*minus=-1; //if first bit "1" mean negative temp datasheet AM2302 p5
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	22ff      	movs	r2, #255	; 0xff
 80002ea:	701a      	strb	r2, [r3, #0]
			}
			temperature|=(0x8000>>(i-16)); //because temp have 16 bit start from 0 so i-16
 80002ec:	7ebb      	ldrb	r3, [r7, #26]
 80002ee:	3b10      	subs	r3, #16
 80002f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002f4:	fa42 f303 	asr.w	r3, r2, r3
 80002f8:	b21a      	sxth	r2, r3
 80002fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80002fe:	4313      	orrs	r3, r2
 8000300:	b21b      	sxth	r3, r3
 8000302:	83bb      	strh	r3, [r7, #28]
 8000304:	e013      	b.n	800032e <read_dht22_humidity_and_temperature+0x14e>
		}
		else if((GPIOA->IDR & 0x40)&&i>=32){
 8000306:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800030e:	2b00      	cmp	r3, #0
 8000310:	d00d      	beq.n	800032e <read_dht22_humidity_and_temperature+0x14e>
 8000312:	7ebb      	ldrb	r3, [r7, #26]
 8000314:	2b1f      	cmp	r3, #31
 8000316:	d90a      	bls.n	800032e <read_dht22_humidity_and_temperature+0x14e>
			checksum|=(0x80>>(i-32)); //because sum have 8 bit start from 0 so i-32
 8000318:	7ebb      	ldrb	r3, [r7, #26]
 800031a:	3b20      	subs	r3, #32
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	fa42 f303 	asr.w	r3, r2, r3
 8000322:	b25a      	sxtb	r2, r3
 8000324:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000328:	4313      	orrs	r3, r2
 800032a:	b25b      	sxtb	r3, r3
 800032c:	76fb      	strb	r3, [r7, #27]
		}
		i++;
 800032e:	7ebb      	ldrb	r3, [r7, #26]
 8000330:	3301      	adds	r3, #1
 8000332:	76bb      	strb	r3, [r7, #26]
		while((GPIOA->IDR & 0x40)){}
 8000334:	bf00      	nop
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <read_dht22_humidity_and_temperature+0x1d8>)
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1f9      	bne.n	8000336 <read_dht22_humidity_and_temperature+0x156>
	while(i<40)
 8000342:	7ebb      	ldrb	r3, [r7, #26]
 8000344:	2b27      	cmp	r3, #39	; 0x27
 8000346:	d9a0      	bls.n	800028a <read_dht22_humidity_and_temperature+0xaa>
	/*Check sum
	 * Checksum=(Byte 0+Byte 1+Byte 2+Byte 3)&0xFF
	 * * The & 0xFF ensures only the least significant 8 bits are considered.
	 * * if the computed checksum matches Byte 4, the data is valid.
	 * */
	uint8_t h_t=0x00, l_t=0x00,h_h=0x00, l_h=0x00,s=0x00;
 8000348:	2300      	movs	r3, #0
 800034a:	767b      	strb	r3, [r7, #25]
 800034c:	2300      	movs	r3, #0
 800034e:	763b      	strb	r3, [r7, #24]
 8000350:	2300      	movs	r3, #0
 8000352:	75fb      	strb	r3, [r7, #23]
 8000354:	2300      	movs	r3, #0
 8000356:	75bb      	strb	r3, [r7, #22]
 8000358:	2300      	movs	r3, #0
 800035a:	757b      	strb	r3, [r7, #21]
	h_t=(temperature>>8); //first byte of temp
 800035c:	8bbb      	ldrh	r3, [r7, #28]
 800035e:	0a1b      	lsrs	r3, r3, #8
 8000360:	b29b      	uxth	r3, r3
 8000362:	767b      	strb	r3, [r7, #25]
	l_t=(temperature&0x00FF); //second byte of temp
 8000364:	8bbb      	ldrh	r3, [r7, #28]
 8000366:	763b      	strb	r3, [r7, #24]
	h_h=(humidity>>8);
 8000368:	8bfb      	ldrh	r3, [r7, #30]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	b29b      	uxth	r3, r3
 800036e:	75fb      	strb	r3, [r7, #23]
	l_h=(humidity&0x00FF);
 8000370:	8bfb      	ldrh	r3, [r7, #30]
 8000372:	75bb      	strb	r3, [r7, #22]
	s=(h_t+l_t+h_h+l_h)&0xFF;
 8000374:	7e7a      	ldrb	r2, [r7, #25]
 8000376:	7e3b      	ldrb	r3, [r7, #24]
 8000378:	4413      	add	r3, r2
 800037a:	b2da      	uxtb	r2, r3
 800037c:	7dfb      	ldrb	r3, [r7, #23]
 800037e:	4413      	add	r3, r2
 8000380:	b2da      	uxtb	r2, r3
 8000382:	7dbb      	ldrb	r3, [r7, #22]
 8000384:	4413      	add	r3, r2
 8000386:	757b      	strb	r3, [r7, #21]
	if(s==checksum){
 8000388:	7d7a      	ldrb	r2, [r7, #21]
 800038a:	7efb      	ldrb	r3, [r7, #27]
 800038c:	429a      	cmp	r2, r3
 800038e:	d103      	bne.n	8000398 <read_dht22_humidity_and_temperature+0x1b8>
		*c_sum=checksum;
 8000390:	7efb      	ldrb	r3, [r7, #27]
 8000392:	b29a      	uxth	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	801a      	strh	r2, [r3, #0]
	}

	/*Return results*/
	temperature &= ~(1<<15); //Change first bit to 0
 8000398:	8bbb      	ldrh	r3, [r7, #28]
 800039a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800039e:	83bb      	strh	r3, [r7, #28]
	*hum=humidity;
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	8bfa      	ldrh	r2, [r7, #30]
 80003a4:	801a      	strh	r2, [r3, #0]
	*temp=temperature;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	8bba      	ldrh	r2, [r7, #28]
 80003aa:	801a      	strh	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40023800 	.word	0x40023800
 80003b8:	40020000 	.word	0x40020000

080003bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <NVIC_EnableIRQ+0x2c>)
 80003c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003cc:	095b      	lsrs	r3, r3, #5
 80003ce:	79fa      	ldrb	r2, [r7, #7]
 80003d0:	f002 021f 	and.w	r2, r2, #31
 80003d4:	2001      	movs	r0, #1
 80003d6:	fa00 f202 	lsl.w	r2, r0, r2
 80003da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	e000e100 	.word	0xe000e100

080003ec <clear_buffer>:

/*
 * Clear buffer. This is used only for receiver buffer, hence fixed size (8 bytes)
 */
void clear_buffer(char *b)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	for (int i=0;i<8;i++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	e007      	b.n	800040a <clear_buffer+0x1e>
		b[i] = 0;
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++)
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	3301      	adds	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2b07      	cmp	r3, #7
 800040e:	ddf4      	ble.n	80003fa <clear_buffer+0xe>
}
 8000410:	bf00      	nop
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
	...

0800041c <main>:
 **===========================================================================
 */


int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000422:	b672      	cpsid	i
	__disable_irq();			//global disable IRQs, M3_Generic_User_Guide p135.

	USART1_Init(); // ModBus
 8000424:	f000 f8e2 	bl	80005ec <USART1_Init>
	USART2_Init(); // Used as debugging terminal
 8000428:	f000 f934 	bl	8000694 <USART2_Init>

	/* Configure the system clock to 32 MHz and update SystemCoreClock */
	SetSysClock();
 800042c:	f000 fb4c 	bl	8000ac8 <SetSysClock>
	SystemCoreClockUpdate();
 8000430:	f000 fc2a 	bl	8000c88 <SystemCoreClockUpdate>


	/* TODO - Add your application code here */


	USART1->CR1 |= 0x0020;			//enable RX interrupt
 8000434:	4a64      	ldr	r2, [pc, #400]	; (80005c8 <main+0x1ac>)
 8000436:	4b64      	ldr	r3, [pc, #400]	; (80005c8 <main+0x1ac>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn); 	//enable interrupt in NVIC
 8000440:	2025      	movs	r0, #37	; 0x25
 8000442:	f7ff ffbb 	bl	80003bc <NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000446:	b662      	cpsie	i
	__enable_irq();					//global enable IRQs, M3_Generic_User_Guide p135

	RCC->AHBENR|=1; 				//GPIOA ABH bus clock ON. p154
 8000448:	4a60      	ldr	r2, [pc, #384]	; (80005cc <main+0x1b0>)
 800044a:	4b60      	ldr	r3, [pc, #384]	; (80005cc <main+0x1b0>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	61d3      	str	r3, [r2, #28]
	GPIOA->MODER&=~0x00000C00;		//clear (input reset state for PA5). p184
 8000454:	4a5e      	ldr	r2, [pc, #376]	; (80005d0 <main+0x1b4>)
 8000456:	4b5e      	ldr	r3, [pc, #376]	; (80005d0 <main+0x1b4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800045e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=0x400; 			//GPIOA pin 5 to output. p184
 8000460:	4a5b      	ldr	r2, [pc, #364]	; (80005d0 <main+0x1b4>)
 8000462:	4b5b      	ldr	r3, [pc, #364]	; (80005d0 <main+0x1b4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046a:	6013      	str	r3, [r2, #0]

	//setup ADC1. p272
	RCC->APB2ENR|=0x00000200;		//enable ADC1 clock
 800046c:	4a57      	ldr	r2, [pc, #348]	; (80005cc <main+0x1b0>)
 800046e:	4b57      	ldr	r3, [pc, #348]	; (80005cc <main+0x1b0>)
 8000470:	6a1b      	ldr	r3, [r3, #32]
 8000472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000476:	6213      	str	r3, [r2, #32]
	ADC1->SQR5=0;					//conversion sequence starts at ch0
 8000478:	4b56      	ldr	r3, [pc, #344]	; (80005d4 <main+0x1b8>)
 800047a:	2200      	movs	r2, #0
 800047c:	641a      	str	r2, [r3, #64]	; 0x40
	ADC1->CR2=0;					//bit 1=0: Single conversion mode, bit 11=0 align right
 800047e:	4b55      	ldr	r3, [pc, #340]	; (80005d4 <main+0x1b8>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
	ADC1->SMPR3=7;				//384 cycles sampling time for channel 0 (longest)
 8000484:	4b53      	ldr	r3, [pc, #332]	; (80005d4 <main+0x1b8>)
 8000486:	2207      	movs	r2, #7
 8000488:	615a      	str	r2, [r3, #20]
	ADC1->CR1&=~0x03000000;		//resolution 12-bit
 800048a:	4a52      	ldr	r2, [pc, #328]	; (80005d4 <main+0x1b8>)
 800048c:	4b51      	ldr	r3, [pc, #324]	; (80005d4 <main+0x1b8>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000494:	6053      	str	r3, [r2, #4]
	ADC1->CR2|=1;					//bit 0, ADC on/off (1=on, 0=off)
 8000496:	4a4f      	ldr	r2, [pc, #316]	; (80005d4 <main+0x1b8>)
 8000498:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <main+0x1b8>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6093      	str	r3, [r2, #8]


	char received_frame[8]={0};
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
	/* Infinite loop */
	unsigned short int crc=0; //16 bitts
 80004ac:	2300      	movs	r3, #0
 80004ae:	83bb      	strh	r3, [r7, #28]
	char crc_high_byte=0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	77fb      	strb	r3, [r7, #31]
	char crc_low_byte=0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	77bb      	strb	r3, [r7, #30]

	char *framingErrorString = "Framing Error Detected";
 80004b8:	4b47      	ldr	r3, [pc, #284]	; (80005d8 <main+0x1bc>)
 80004ba:	61bb      	str	r3, [r7, #24]
	char *noiseErrorString = "Noise Error Detected";
 80004bc:	4b47      	ldr	r3, [pc, #284]	; (80005dc <main+0x1c0>)
 80004be:	617b      	str	r3, [r7, #20]

	/*Infinite loop*/
	uint16_t hum=0,temp=0,c_sum=0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	80fb      	strh	r3, [r7, #6]
 80004c4:	2300      	movs	r3, #0
 80004c6:	80bb      	strh	r3, [r7, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	807b      	strh	r3, [r7, #2]
	signed char minus = 1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	707b      	strb	r3, [r7, #1]


	USART1_IRQHandler();
 80004d0:	f000 f94e 	bl	8000770 <USART1_IRQHandler>

	while (1)
	{
		if (frameFlag == 1)
 80004d4:	4b42      	ldr	r3, [pc, #264]	; (80005e0 <main+0x1c4>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d10b      	bne.n	80004f6 <main+0xda>
		{
			/* Here we have encountered a framing erorr. I tshould not occur, but if it does, here we handle it */
			write_debug_msg(framingErrorString, 22);
 80004de:	2116      	movs	r1, #22
 80004e0:	69b8      	ldr	r0, [r7, #24]
 80004e2:	f000 fa8f 	bl	8000a04 <write_debug_msg>
			frameFlag = 0;
 80004e6:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <main+0x1c4>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
			clear_buffer(received_frame);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff7b 	bl	80003ec <clear_buffer>
		}
		if (neFlag == 1)
 80004f6:	4b3b      	ldr	r3, [pc, #236]	; (80005e4 <main+0x1c8>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d10b      	bne.n	8000518 <main+0xfc>
		{
			/* If we have noise error in communication, we handle it here */
			write_debug_msg(noiseErrorString, 22);
 8000500:	2116      	movs	r1, #22
 8000502:	6978      	ldr	r0, [r7, #20]
 8000504:	f000 fa7e 	bl	8000a04 <write_debug_msg>
			neFlag = 0;
 8000508:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <main+0x1c8>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
			clear_buffer(received_frame);
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff6a 	bl	80003ec <clear_buffer>
		}
		if(mFlag==1) //correct slave address
 8000518:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <main+0x1cc>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b01      	cmp	r3, #1
 8000520:	d148      	bne.n	80005b4 <main+0x198>
		{
			read_7_bytes_from_usartx(&received_frame[1]);
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	3301      	adds	r3, #1
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f9c1 	bl	80008b0 <read_7_bytes_from_usartx>
			received_frame[0]=SLAVE_ADDRESS;
 800052e:	2301      	movs	r3, #1
 8000530:	723b      	strb	r3, [r7, #8]
			crc=CRC16(received_frame,6);
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	2106      	movs	r1, #6
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f957 	bl	80007ec <CRC16>
 800053e:	4603      	mov	r3, r0
 8000540:	83bb      	strh	r3, [r7, #28]
			crc_high_byte=crc>>8|crc_high_byte; //high byte
 8000542:	8bbb      	ldrh	r3, [r7, #28]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	b29b      	uxth	r3, r3
 8000548:	b2da      	uxtb	r2, r3
 800054a:	7ffb      	ldrb	r3, [r7, #31]
 800054c:	4313      	orrs	r3, r2
 800054e:	77fb      	strb	r3, [r7, #31]
			crc_low_byte=crc|crc_low_byte; //low byte
 8000550:	8bbb      	ldrh	r3, [r7, #28]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	7fbb      	ldrb	r3, [r7, #30]
 8000556:	4313      	orrs	r3, r2
 8000558:	77bb      	strb	r3, [r7, #30]


			if((received_frame[7]==crc_high_byte)&&(received_frame[6]==crc_low_byte)) //CRC check
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	7ffa      	ldrb	r2, [r7, #31]
 800055e:	429a      	cmp	r2, r3
 8000560:	d118      	bne.n	8000594 <main+0x178>
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	7fba      	ldrb	r2, [r7, #30]
 8000566:	429a      	cmp	r2, r3
 8000568:	d114      	bne.n	8000594 <main+0x178>
			{
				if(received_frame[3]==INPUT_REGISTER) //input register check and can be added more registers
 800056a:	7afb      	ldrb	r3, [r7, #11]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d111      	bne.n	8000594 <main+0x178>
				{
					/*dht22_humidity_and_temperature*/
					read_dht22_humidity_and_temperature(&temp, &hum, &c_sum, &minus); //
 8000570:	1c7b      	adds	r3, r7, #1
 8000572:	1cba      	adds	r2, r7, #2
 8000574:	1db9      	adds	r1, r7, #6
 8000576:	1d38      	adds	r0, r7, #4
 8000578:	f7ff fe32 	bl	80001e0 <read_dht22_humidity_and_temperature>
					if (c_sum != 0){
 800057c:	887b      	ldrh	r3, [r7, #2]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d008      	beq.n	8000594 <main+0x178>
						int sensor_value=temp*minus;
 8000582:	88bb      	ldrh	r3, [r7, #4]
 8000584:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8000588:	fb02 f303 	mul.w	r3, r2, r3
 800058c:	613b      	str	r3, [r7, #16]
						respond_frame(sensor_value); //no multiplication by x10 because ADC value quite big 300-1000
 800058e:	6938      	ldr	r0, [r7, #16]
 8000590:	f000 f9bc 	bl	800090c <respond_frame>
				}
			}
			else
			{
			}
			crc=0;
 8000594:	2300      	movs	r3, #0
 8000596:	83bb      	strh	r3, [r7, #28]
			crc_low_byte=0;
 8000598:	2300      	movs	r3, #0
 800059a:	77bb      	strb	r3, [r7, #30]
			crc_high_byte=0;
 800059c:	2300      	movs	r3, #0
 800059e:	77fb      	strb	r3, [r7, #31]
			mFlag=0;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <main+0x1cc>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
			//GPIOA->ODR|=0x20;				//0010 0000 or bit 5. p186
			USART1->CR1 |= 0x0020;			//enable RX interrupt
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <main+0x1ac>)
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <main+0x1ac>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	f043 0320 	orr.w	r3, r3, #32
 80005b0:	60d3      	str	r3, [r2, #12]
 80005b2:	e78f      	b.n	80004d4 <main+0xb8>
		}
		else if(mFlag==2) //wrong slave address
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0x1cc>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d18a      	bne.n	80004d4 <main+0xb8>
		{
			wrong_slave_address();
 80005be:	f000 f957 	bl	8000870 <wrong_slave_address>

			received_frame[0] = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	723b      	strb	r3, [r7, #8]
		if (frameFlag == 1)
 80005c6:	e785      	b.n	80004d4 <main+0xb8>
 80005c8:	40013800 	.word	0x40013800
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40012400 	.word	0x40012400
 80005d8:	08000e38 	.word	0x08000e38
 80005dc:	08000e50 	.word	0x08000e50
 80005e0:	20000035 	.word	0x20000035
 80005e4:	20000034 	.word	0x20000034
 80005e8:	20000000 	.word	0x20000000

080005ec <USART1_Init>:

/**
 * Initialize Modbus pins for UART1
 */
void USART1_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	RCC->APB2ENR|=(1<<14);	 	//set bit 14 (USART1 EN) p.156
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <USART1_Init+0x9c>)
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <USART1_Init+0x9c>)
 80005f4:	6a1b      	ldr	r3, [r3, #32]
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6213      	str	r3, [r2, #32]
	RCC->AHBENR|=0x00000001; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <USART1_Init+0x9c>)
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <USART1_Init+0x9c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[1]=0x00000700;	//GPIOx_AFRL p.189,AF7 p.177 (AFRH10[3:0])
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <USART1_Init+0xa0>)
 800060a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1]|=0x00000070;	//GPIOx_AFRL p.189,AF7 p.177 (AFRH9[3:0])
 8000610:	4a1e      	ldr	r2, [pc, #120]	; (800068c <USART1_Init+0xa0>)
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <USART1_Init+0xa0>)
 8000614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000616:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800061a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->MODER|=0x00080000; 	//MODER2=PA9(TX)D8 to mode 10=alternate function mode. p184
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <USART1_Init+0xa0>)
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <USART1_Init+0xa0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000626:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=0x00200000; 	//MODER2=PA10(RX)D2 to mode 10=alternate function mode. p184
 8000628:	4a18      	ldr	r2, [pc, #96]	; (800068c <USART1_Init+0xa0>)
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <USART1_Init+0xa0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000632:	6013      	str	r3, [r2, #0]

	USART1->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, D05
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <USART1_Init+0xa4>)
 8000636:	f640 5205 	movw	r2, #3333	; 0xd05
 800063a:	609a      	str	r2, [r3, #8]
	USART1->CR1 = 0x00000008;	//TE bit. p739-740. Enable transmit
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <USART1_Init+0xa4>)
 800063e:	2208      	movs	r2, #8
 8000640:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= 0x00000004;	//RE bit. p739-740. Enable receiver
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <USART1_Init+0xa4>)
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <USART1_Init+0xa4>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 0x00002000;	//UE bit. p739-740. Uart enable
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <USART1_Init+0xa4>)
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <USART1_Init+0xa4>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000658:	60d3      	str	r3, [r2, #12]

	USART1->CR1 |= USART_CR1_SBK; // SBK bit. Send break enabled
 800065a:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <USART1_Init+0xa4>)
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <USART1_Init+0xa4>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	60d3      	str	r3, [r2, #12]

	USART1->CR2 = 0x00; // reset
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <USART1_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]

	USART1->CR3 = 0;   // Set to default state
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <USART1_Init+0xa4>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
	USART1->CR3 |= 1;  // Enable error interrupt,  p744
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <USART1_Init+0xa4>)
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <USART1_Init+0xa4>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6153      	str	r3, [r2, #20]
	/* Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing
	error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USART_SR register) in
	case of Multi Buffer Communication (DMAR=1 in the USART_CR3 register).
	 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40020000 	.word	0x40020000
 8000690:	40013800 	.word	0x40013800

08000694 <USART2_Init>:

/**
 * Initialize TERMINAL pins for UART2, used for debugging
 */
void USART2_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	RCC->APB1ENR|=0x00020000; 	//set bit 17 (USART2 EN)
 8000698:	4a1c      	ldr	r2, [pc, #112]	; (800070c <USART2_Init+0x78>)
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <USART2_Init+0x78>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a2:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR|=0x00000001; 	//enable GPIOA port clock bit 0 (GPIOA EN)
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <USART2_Init+0x78>)
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <USART2_Init+0x78>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0]=0x00000700;	//GPIOx_AFRL p.188,AF7 p.177
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <USART2_Init+0x7c>)
 80006b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006b6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]|=0x00007000;	//GPIOx_AFRL p.188,AF7 p.177
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <USART2_Init+0x7c>)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <USART2_Init+0x7c>)
 80006bc:	6a1b      	ldr	r3, [r3, #32]
 80006be:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80006c2:	6213      	str	r3, [r2, #32]
	GPIOA->MODER|=0x00000020; 	//MODER2=PA2(TX) to mode 10=alternate function mode. p184
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <USART2_Init+0x7c>)
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <USART2_Init+0x7c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|=0x00000080; 	//MODER2=PA3(RX) to mode 10=alternate function mode. p184
 80006d0:	4a0f      	ldr	r2, [pc, #60]	; (8000710 <USART2_Init+0x7c>)
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <USART2_Init+0x7c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006da:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000D05;	//9600 BAUD and crystal 32MHz. p710, D05
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <USART2_Init+0x80>)
 80006de:	f640 5205 	movw	r2, #3333	; 0xd05
 80006e2:	609a      	str	r2, [r3, #8]
	USART2->CR1 = 0x00000008;	//TE bit. p739-740. Enable transmit
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <USART2_Init+0x80>)
 80006e6:	2208      	movs	r2, #8
 80006e8:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= 0x00000004;	//RE bit. p739-740. Enable receiver
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <USART2_Init+0x80>)
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <USART2_Init+0x80>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= 0x00002000;	//UE bit. p739-740. Uart enable
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <USART2_Init+0x80>)
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <USART2_Init+0x80>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000700:	60d3      	str	r3, [r2, #12]
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000
 8000714:	40004400 	.word	0x40004400

08000718 <USART1_write>:

void USART1_write(char data)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	//wait while TX buffer is empty
	while(!(USART1->SR&0x0080)){} 	//TXE: Transmit data register empty. p736-737
 8000722:	bf00      	nop
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <USART1_write+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f9      	beq.n	8000724 <USART1_write+0xc>
	USART1->DR=(data);			//p739
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <USART1_write+0x28>)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	6053      	str	r3, [r2, #4]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40013800 	.word	0x40013800

08000744 <USART2_write>:

void USART2_write(char data)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	//wait while TX buffer is empty
	while(!(USART2->SR&0x0080)){} 	//TXE: Transmit data register empty. p736-737
 800074e:	bf00      	nop
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <USART2_write+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0f9      	beq.n	8000750 <USART2_write+0xc>
	USART2->DR=(data);			//p739
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <USART2_write+0x28>)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	6053      	str	r3, [r2, #4]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40004400 	.word	0x40004400

08000770 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
	char received_slave_address=0;
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]

	/**
	 * If there is framing error (physical) in the modbus, we raise a flag here. Since inside
	 * IRQ handler actions should be simple and fast.  We will then investigate the flag in main()
	 */
	if (USART1->SR & USART_SR_FE)
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <USART1_IRQHandler+0x6c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	2b00      	cmp	r3, #0
 8000784:	d002      	beq.n	800078c <USART1_IRQHandler+0x1c>
	{
		frameFlag = 1;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <USART1_IRQHandler+0x70>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]

	/**
	 * If there is noise error (physical) in the modbus, we raise a flag here. Since inside
	 * IRQ handler actions should be simple and fast. We will then investigate the flag in main()
	 */
	if (USART1->SR & USART_SR_NE)
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <USART1_IRQHandler+0x6c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 0304 	and.w	r3, r3, #4
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <USART1_IRQHandler+0x2e>
	{
		neFlag = 1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <USART1_IRQHandler+0x74>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
	}

	if(USART1->SR & 0x0020) 		//if data available in DR register. p737
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <USART1_IRQHandler+0x6c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <USART1_IRQHandler+0x40>
	{
		received_slave_address=USART1->DR;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <USART1_IRQHandler+0x6c>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	71fb      	strb	r3, [r7, #7]
	}
	if(received_slave_address==SLAVE_ADDRESS) //if we have right address
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d103      	bne.n	80007be <USART1_IRQHandler+0x4e>
	{
		mFlag=1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <USART1_IRQHandler+0x78>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <USART1_IRQHandler+0x54>

	}
	else
	{
		mFlag=2;
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <USART1_IRQHandler+0x78>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	701a      	strb	r2, [r3, #0]


	}
	USART1->CR1 &= ~0x0020;			//disable RX interrupt
 80007c4:	4a05      	ldr	r2, [pc, #20]	; (80007dc <USART1_IRQHandler+0x6c>)
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <USART1_IRQHandler+0x6c>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	f023 0320 	bic.w	r3, r3, #32
 80007ce:	60d3      	str	r3, [r2, #12]

}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40013800 	.word	0x40013800
 80007e0:	20000035 	.word	0x20000035
 80007e4:	20000034 	.word	0x20000034
 80007e8:	20000000 	.word	0x20000000

080007ec <CRC16>:

unsigned short int CRC16(char *nData,unsigned short int wLength)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
			0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
			0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
			0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

	unsigned char nTemp;
	unsigned short int wCRCWord = 0xFFFF;
 80007f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fc:	81fb      	strh	r3, [r7, #14]

	while (wLength--)
 80007fe:	e011      	b.n	8000824 <CRC16+0x38>
	{
		nTemp = *nData++ ^ wCRCWord;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4053      	eors	r3, r2
 800080e:	737b      	strb	r3, [r7, #13]
		wCRCWord >>= 8;
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	81fb      	strh	r3, [r7, #14]
		wCRCWord ^= wCRCTable[nTemp];
 8000816:	7b7b      	ldrb	r3, [r7, #13]
 8000818:	4a08      	ldr	r2, [pc, #32]	; (800083c <CRC16+0x50>)
 800081a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800081e:	89fb      	ldrh	r3, [r7, #14]
 8000820:	4053      	eors	r3, r2
 8000822:	81fb      	strh	r3, [r7, #14]
	while (wLength--)
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	1e5a      	subs	r2, r3, #1
 8000828:	807a      	strh	r2, [r7, #2]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1e8      	bne.n	8000800 <CRC16+0x14>
	}
	return wCRCWord;
 800082e:	89fb      	ldrh	r3, [r7, #14]

}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	08000e70 	.word	0x08000e70

08000840 <USART1_read>:

char USART1_read()
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
	char data=0;
 8000846:	2300      	movs	r3, #0
 8000848:	71fb      	strb	r3, [r7, #7]
	//wait while RX buffer is data is ready to be read
	while(!(USART1->SR&0x0020)){} 	//Bit 5 RXNE: Read data register not empty
 800084a:	bf00      	nop
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <USART1_read+0x2c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0320 	and.w	r3, r3, #32
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f9      	beq.n	800084c <USART1_read+0xc>
	data=USART1->DR;			//p739
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <USART1_read+0x2c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	71fb      	strb	r3, [r7, #7]
	return data;
 800085e:	79fb      	ldrb	r3, [r7, #7]
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40013800 	.word	0x40013800

08000870 <wrong_slave_address>:
	data=USART2->DR;			//p739
	return data;
}

void wrong_slave_address(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	USART1->CR1 &= ~0x00000004;		//RE bit. p739-740. Disable receiver
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <wrong_slave_address+0x38>)
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <wrong_slave_address+0x38>)
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	f023 0304 	bic.w	r3, r3, #4
 800087e:	60d3      	str	r3, [r2, #12]
	delay_Ms(10); 					//time=1/9600 x 10 bits x 7 byte = 7,29 ms
 8000880:	200a      	movs	r0, #10
 8000882:	f7ff fc7b 	bl	800017c <delay_Ms>
	USART1->CR1 |= 0x00000004;		//RE bit. p739-740. Enable receiver
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <wrong_slave_address+0x38>)
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <wrong_slave_address+0x38>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 0x0020;			//enable RX interrupt
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <wrong_slave_address+0x38>)
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <wrong_slave_address+0x38>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	60d3      	str	r3, [r2, #12]
	mFlag=0;
 800089e:	4b03      	ldr	r3, [pc, #12]	; (80008ac <wrong_slave_address+0x3c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	20000000 	.word	0x20000000

080008b0 <read_7_bytes_from_usartx>:


void read_7_bytes_from_usartx(char *received_frame)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	char frame[7]={0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t i=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	73fb      	strb	r3, [r7, #15]

	while(i<7)
 80008c8:	e013      	b.n	80008f2 <read_7_bytes_from_usartx+0x42>
	{
		*received_frame=USART1_read();
 80008ca:	f7ff ffb9 	bl	8000840 <USART1_read>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	701a      	strb	r2, [r3, #0]
		frame[i]=*received_frame;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	f107 0110 	add.w	r1, r7, #16
 80008e0:	440b      	add	r3, r1
 80008e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		received_frame++;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3301      	adds	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
		i++;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	3301      	adds	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
	while(i<7)
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	2b06      	cmp	r3, #6
 80008f6:	d9e8      	bls.n	80008ca <read_7_bytes_from_usartx+0x1a>
	}
	write_debug_frame(frame, 7);
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2107      	movs	r1, #7
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f8a8 	bl	8000a54 <write_debug_frame>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <respond_frame>:
	result=ADC1->DR;			//read conversion result
	return result;
}

void respond_frame(int sensor_value)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	GPIOA->ODR|=0x20;				//led on, transmitting mode
 8000914:	4a39      	ldr	r2, [pc, #228]	; (80009fc <respond_frame+0xf0>)
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <respond_frame+0xf0>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	6153      	str	r3, [r2, #20]
	//example response should be like this: 0104020B057E03
	char respond_frame[7]={SLAVE_ADDRESS,0x04,0x02,0,0,0,0};
 8000920:	4a37      	ldr	r2, [pc, #220]	; (8000a00 <respond_frame+0xf4>)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	e892 0003 	ldmia.w	r2, {r0, r1}
 800092a:	6018      	str	r0, [r3, #0]
 800092c:	3304      	adds	r3, #4
 800092e:	8019      	strh	r1, [r3, #0]
 8000930:	3302      	adds	r3, #2
 8000932:	0c0a      	lsrs	r2, r1, #16
 8000934:	701a      	strb	r2, [r3, #0]
	char sensor_high_bits=0;
 8000936:	2300      	movs	r3, #0
 8000938:	76fb      	strb	r3, [r7, #27]
	char sensor_low_bits=0;
 800093a:	2300      	movs	r3, #0
 800093c:	76bb      	strb	r3, [r7, #26]
	char crc_high_byte=0;
 800093e:	2300      	movs	r3, #0
 8000940:	767b      	strb	r3, [r7, #25]
	char crc_low_byte=0;
 8000942:	2300      	movs	r3, #0
 8000944:	763b      	strb	r3, [r7, #24]
	unsigned short int crc=0; //16 bits
 8000946:	2300      	movs	r3, #0
 8000948:	82fb      	strh	r3, [r7, #22]

	sensor_high_bits=(sensor_value>>8)|sensor_high_bits;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	121b      	asrs	r3, r3, #8
 800094e:	b25a      	sxtb	r2, r3
 8000950:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000954:	4313      	orrs	r3, r2
 8000956:	b25b      	sxtb	r3, r3
 8000958:	76fb      	strb	r3, [r7, #27]
	sensor_low_bits=sensor_value|sensor_low_bits;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	b25a      	sxtb	r2, r3
 800095e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000962:	4313      	orrs	r3, r2
 8000964:	b25b      	sxtb	r3, r3
 8000966:	76bb      	strb	r3, [r7, #26]
	respond_frame[3]=sensor_high_bits;
 8000968:	7efb      	ldrb	r3, [r7, #27]
 800096a:	73fb      	strb	r3, [r7, #15]
	respond_frame[4]=sensor_low_bits;
 800096c:	7ebb      	ldrb	r3, [r7, #26]
 800096e:	743b      	strb	r3, [r7, #16]
	crc=CRC16(respond_frame,5);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2105      	movs	r1, #5
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff38 	bl	80007ec <CRC16>
 800097c:	4603      	mov	r3, r0
 800097e:	82fb      	strh	r3, [r7, #22]
	crc_high_byte=(crc>>8)|crc_high_byte; //high byte
 8000980:	8afb      	ldrh	r3, [r7, #22]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	b29b      	uxth	r3, r3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	7e7b      	ldrb	r3, [r7, #25]
 800098a:	4313      	orrs	r3, r2
 800098c:	767b      	strb	r3, [r7, #25]
	crc_low_byte=crc|crc_low_byte; //low byte
 800098e:	8afb      	ldrh	r3, [r7, #22]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	7e3b      	ldrb	r3, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	763b      	strb	r3, [r7, #24]

	respond_frame[6]=crc_high_byte;
 8000998:	7e7b      	ldrb	r3, [r7, #25]
 800099a:	74bb      	strb	r3, [r7, #18]
	respond_frame[5]=crc_low_byte;
 800099c:	7e3b      	ldrb	r3, [r7, #24]
 800099e:	747b      	strb	r3, [r7, #17]

	for(int i=0;i<7;i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	e010      	b.n	80009c8 <respond_frame+0xbc>
	{
		//blink_led();
		led_on();
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <respond_frame+0xf0>)
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <respond_frame+0xf0>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	6153      	str	r3, [r2, #20]
		USART1_write(respond_frame[i]);
 80009b2:	f107 020c 	add.w	r2, r7, #12
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff feab 	bl	8000718 <USART1_write>
	for(int i=0;i<7;i++)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3301      	adds	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	ddeb      	ble.n	80009a6 <respond_frame+0x9a>
	}
	write_debug_frame(respond_frame, 7);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2107      	movs	r1, #7
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f83d 	bl	8000a54 <write_debug_frame>
	led_off();
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <respond_frame+0xf0>)
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <respond_frame+0xf0>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	f023 0320 	bic.w	r3, r3, #32
 80009e4:	6153      	str	r3, [r2, #20]
	GPIOA->ODR&=~0x20;				//led off, receiving mode
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <respond_frame+0xf0>)
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <respond_frame+0xf0>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f023 0320 	bic.w	r3, r3, #32
 80009f0:	6153      	str	r3, [r2, #20]

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020000 	.word	0x40020000
 8000a00:	08000e68 	.word	0x08000e68

08000a04 <write_debug_msg>:

/**
 * Debug write a string to debug terminal
 */
void write_debug_msg(char *str, int maxchars)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
	while(str[i] != '\0') {
 8000a12:	e00d      	b.n	8000a30 <write_debug_msg+0x2c>
		USART2_write(str[i]);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe91 	bl	8000744 <USART2_write>
		if (++i == maxchars)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d006      	beq.n	8000a3e <write_debug_msg+0x3a>
	while(str[i] != '\0') {
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1eb      	bne.n	8000a14 <write_debug_msg+0x10>
 8000a3c:	e000      	b.n	8000a40 <write_debug_msg+0x3c>
			break;
 8000a3e:	bf00      	nop
	}
	USART2_write('\r');
 8000a40:	200d      	movs	r0, #13
 8000a42:	f7ff fe7f 	bl	8000744 <USART2_write>
	USART2_write('\n');
 8000a46:	200a      	movs	r0, #10
 8000a48:	f7ff fe7c 	bl	8000744 <USART2_write>
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <write_debug_frame>:

/**
 * Write Modbus frame bytes to debug terminal
 */
void write_debug_frame(char *str, int maxchars)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0;i<8;i++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e022      	b.n	8000aaa <write_debug_frame+0x56>
		USART2_write('0');
 8000a64:	2030      	movs	r0, #48	; 0x30
 8000a66:	f7ff fe6d 	bl	8000744 <USART2_write>
		USART2_write('x');
 8000a6a:	2078      	movs	r0, #120	; 0x78
 8000a6c:	f7ff fe6a 	bl	8000744 <USART2_write>
		USART2_write(bytestr[(str[i] & 0xf0) >> 4]);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	091b      	lsrs	r3, r3, #4
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <write_debug_frame+0x70>)
 8000a80:	5c9b      	ldrb	r3, [r3, r2]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe5e 	bl	8000744 <USART2_write>
		USART2_write(bytestr[str[i] & 0x0f]);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f003 030f 	and.w	r3, r3, #15
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <write_debug_frame+0x70>)
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe53 	bl	8000744 <USART2_write>
		USART2_write(44);
 8000a9e:	202c      	movs	r0, #44	; 0x2c
 8000aa0:	f7ff fe50 	bl	8000744 <USART2_write>
	for (i=0;i<8;i++) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	ddd9      	ble.n	8000a64 <write_debug_frame+0x10>
	}
	USART2_write('\r');
 8000ab0:	200d      	movs	r0, #13
 8000ab2:	f7ff fe47 	bl	8000744 <USART2_write>
	USART2_write('\n');
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f7ff fe44 	bl	8000744 <USART2_write>
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <SetSysClock>:
#include "include.h"

void SetSysClock(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <SetSysClock+0x100>)
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <SetSysClock+0x100>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000ade:	bf00      	nop
 8000ae0:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <SetSysClock+0x100>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f9      	beq.n	8000ae0 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <SetSysClock+0x100>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <SetSysClock+0x36>
  {
    status = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	e001      	b.n	8000b02 <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10b      	bne.n	8000b20 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8000b08:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <SetSysClock+0x100>)
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <SetSysClock+0x100>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b12:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000b14:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <SetSysClock+0x100>)
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <SetSysClock+0x100>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000b1e:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }

  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <SetSysClock+0x104>)
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <SetSysClock+0x104>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <SetSysClock+0x104>)
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <SetSysClock+0x104>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8000b38:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <SetSysClock+0x104>)
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <SetSysClock+0x104>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <SetSysClock+0x100>)
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <SetSysClock+0x100>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <SetSysClock+0x108>)
 8000b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b56:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8000b58:	bf00      	nop
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <SetSysClock+0x108>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f9      	bne.n	8000b5a <SetSysClock+0x92>

  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <SetSysClock+0x100>)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <SetSysClock+0x100>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b70:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <SetSysClock+0x100>)
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <SetSysClock+0x100>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b7c:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <SetSysClock+0x100>)
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <SetSysClock+0x100>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b88:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <SetSysClock+0x100>)
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <SetSysClock+0x100>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b94:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 8000b96:	bf00      	nop
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <SetSysClock+0x100>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f9      	beq.n	8000b98 <SetSysClock+0xd0>

  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <SetSysClock+0x100>)
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <SetSysClock+0x100>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f043 0303 	orr.w	r3, r3, #3
 8000bae:	6093      	str	r3, [r2, #8]

  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000bb0:	bf00      	nop
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SetSysClock+0x100>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f9      	beq.n	8000bb2 <SetSysClock+0xea>
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40023c00 	.word	0x40023c00
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bd6:	e003      	b.n	8000be0 <LoopCopyDataInit>

08000bd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bde:	3104      	adds	r1, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000be0:	480a      	ldr	r0, [pc, #40]	; (8000c0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000be4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000be6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000be8:	d3f6      	bcc.n	8000bd8 <CopyDataInit>
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bec:	e002      	b.n	8000bf4 <LoopFillZerobss>

08000bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bf0:	f842 3b04 	str.w	r3, [r2], #4

08000bf4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bf6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bf8:	d3f9      	bcc.n	8000bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bfa:	f000 f811 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f000 f8eb 	bl	8000dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff fc0b 	bl	800041c <main>
  bx lr
 8000c06:	4770      	bx	lr
  ldr r3, =_sidata
 8000c08:	08001094 	.word	0x08001094
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c10:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000c14:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000c18:	20000038 	.word	0x20000038

08000c1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_IRQHandler>
	...

08000c20 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000c24:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <SystemInit+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <SystemInit+0x5c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000c30:	4912      	ldr	r1, [pc, #72]	; (8000c7c <SystemInit+0x5c>)
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <SystemInit+0x5c>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <SystemInit+0x60>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <SystemInit+0x5c>)
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SystemInit+0x5c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000c46:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000c4a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <SystemInit+0x5c>)
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <SystemInit+0x5c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c56:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000c58:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <SystemInit+0x5c>)
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SystemInit+0x5c>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000c62:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SystemInit+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x64>)
 8000c6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c70:	609a      	str	r2, [r3, #8]
#endif
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	88ffc00c 	.word	0x88ffc00c
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ca2:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <SystemCoreClockUpdate+0x13c>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b0c      	cmp	r3, #12
 8000cb0:	d863      	bhi.n	8000d7a <SystemCoreClockUpdate+0xf2>
 8000cb2:	a201      	add	r2, pc, #4	; (adr r2, 8000cb8 <SystemCoreClockUpdate+0x30>)
 8000cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb8:	08000ced 	.word	0x08000ced
 8000cbc:	08000d7b 	.word	0x08000d7b
 8000cc0:	08000d7b 	.word	0x08000d7b
 8000cc4:	08000d7b 	.word	0x08000d7b
 8000cc8:	08000d0d 	.word	0x08000d0d
 8000ccc:	08000d7b 	.word	0x08000d7b
 8000cd0:	08000d7b 	.word	0x08000d7b
 8000cd4:	08000d7b 	.word	0x08000d7b
 8000cd8:	08000d15 	.word	0x08000d15
 8000cdc:	08000d7b 	.word	0x08000d7b
 8000ce0:	08000d7b 	.word	0x08000d7b
 8000ce4:	08000d7b 	.word	0x08000d7b
 8000ce8:	08000d1d 	.word	0x08000d1d
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <SystemCoreClockUpdate+0x13c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	0b5b      	lsrs	r3, r3, #13
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000d08:	601a      	str	r2, [r3, #0]
      break;
 8000d0a:	e046      	b.n	8000d9a <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <SystemCoreClockUpdate+0x144>)
 8000d10:	601a      	str	r2, [r3, #0]
      break;
 8000d12:	e042      	b.n	8000d9a <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <SystemCoreClockUpdate+0x144>)
 8000d18:	601a      	str	r2, [r3, #0]
      break;
 8000d1a:	e03e      	b.n	8000d9a <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <SystemCoreClockUpdate+0x13c>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d24:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <SystemCoreClockUpdate+0x13c>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000d2e:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	0c9b      	lsrs	r3, r3, #18
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <SystemCoreClockUpdate+0x148>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	0d9b      	lsrs	r3, r3, #22
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <SystemCoreClockUpdate+0x13c>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4a:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <SystemCoreClockUpdate+0x144>)
 8000d56:	fb02 f203 	mul.w	r2, r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000d62:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000d64:	e019      	b.n	8000d9a <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <SystemCoreClockUpdate+0x144>)
 8000d6a:	fb02 f203 	mul.w	r2, r2, r3
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000d76:	6013      	str	r3, [r2, #0]
      break;
 8000d78:	e00f      	b.n	8000d9a <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <SystemCoreClockUpdate+0x13c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	0b5b      	lsrs	r3, r3, #13
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000d96:	601a      	str	r2, [r3, #0]
      break;
 8000d98:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <SystemCoreClockUpdate+0x13c>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <SystemCoreClockUpdate+0x14c>)
 8000da6:	5cd3      	ldrb	r3, [r2, r3]
 8000da8:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa22 f303 	lsr.w	r3, r2, r3
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <SystemCoreClockUpdate+0x140>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	20000014 	.word	0x20000014
 8000dcc:	007a1200 	.word	0x007a1200
 8000dd0:	08001070 	.word	0x08001070
 8000dd4:	0800107c 	.word	0x0800107c

08000dd8 <__libc_init_array>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	2500      	movs	r5, #0
 8000ddc:	4e0c      	ldr	r6, [pc, #48]	; (8000e10 <__libc_init_array+0x38>)
 8000dde:	4c0d      	ldr	r4, [pc, #52]	; (8000e14 <__libc_init_array+0x3c>)
 8000de0:	1ba4      	subs	r4, r4, r6
 8000de2:	10a4      	asrs	r4, r4, #2
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	d109      	bne.n	8000dfc <__libc_init_array+0x24>
 8000de8:	f000 f81a 	bl	8000e20 <_init>
 8000dec:	2500      	movs	r5, #0
 8000dee:	4e0a      	ldr	r6, [pc, #40]	; (8000e18 <__libc_init_array+0x40>)
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <__libc_init_array+0x44>)
 8000df2:	1ba4      	subs	r4, r4, r6
 8000df4:	10a4      	asrs	r4, r4, #2
 8000df6:	42a5      	cmp	r5, r4
 8000df8:	d105      	bne.n	8000e06 <__libc_init_array+0x2e>
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e00:	4798      	blx	r3
 8000e02:	3501      	adds	r5, #1
 8000e04:	e7ee      	b.n	8000de4 <__libc_init_array+0xc>
 8000e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e0a:	4798      	blx	r3
 8000e0c:	3501      	adds	r5, #1
 8000e0e:	e7f2      	b.n	8000df6 <__libc_init_array+0x1e>
 8000e10:	0800108c 	.word	0x0800108c
 8000e14:	0800108c 	.word	0x0800108c
 8000e18:	0800108c 	.word	0x0800108c
 8000e1c:	08001090 	.word	0x08001090

08000e20 <_init>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr

08000e2c <_fini>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr
